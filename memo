関数名の付け方
// method
struct {class name} {};

void *{class name}_{method name}({class name} *self, ...);

// func
struct vec3 {};
void *{class name}{func name}(...);
vec3 vecmul();
vec3 vecdot();
vec3 veclen();


new(値渡し)とalloc(callocしたポインターを返す)をちゃんと分けて作る

headerファイル 分けた方がいいものは分けていく。

fcolorとcolorが混同するのでcolorをなくしてfcolorから(colorをかませずに)mlx用のpixcel値を作成するようにする。

fcolorとvectorは一緒の型にしてしまう。

交代時間を守るために画面にストップウォッチ表示

パーサを作る

メモリリークは丁寧に注意しながらコードを書く
normは関数数制限などのもの以外は守っていく。

TDUを見るわけではなく、自分達が書いたコードを参考にしつつ実装していく。（わかんなくなったら資料は見てOK）
基本的には動く状態を維持。2~3時間コードを書き続けてモブプロ交代時、プログラムが動かない状況が2回続くようなことはないよう努める(デバッグが大変だから)

モブプロは１時間交代、疲れるようだったら短くする。

libft系の関数は標準関数を使っておいて後で置き換える



作業の流れ
Makefile
main.c ひとまずmlxの画面が出る。
基礎的vec3とかcolorに関する関数の作成
作業の分解(やりべきことを個別具体的に書き出す)
- パーサを作る
- Testを書く
球体を描画できるようにする(マテリアル構造体、インターセクション、ray関数)

- ray_trace()
	- t_ray
	- get_ray()
	- ray_at()
	- sphere.hit()
	- t_hit_record
	- lighting_at()
	- diffuse_light()
	- specular_light()
# Multiple Spheres
	- sphere.next
	- translate
	- hit -> return the nearest hit
# Shadow
# Parse
# Multiple hittable types(PLANE)
# Multiple hittable types(CYLINDER)

## material
	- new,allocが必要
	- scatter()
## texture
	- color_value()

# ray
	get_ray() スクリーン上のピクセルに向かうレイの作成
	get_shadow_ray() 交点から光源に向かうレイの作成

# shape = hittable
	- (sphre/plane/cylinder)
	- new,allocが必要
	- test_intersection() / hit() -> intersection_test_result/hit_record
	- set_face_normal()
	shape_list_add()も必要

# intersection_test_result, intersection_point = hit_record
	- get_intersection_{obj name}
	
# light_source
	- new,allocが必要
	- lighting_at() -> lighting
## lighting
	- new,allocが必要

# scene = camera + hittable_list
	- new/alloc

# parser
	- parse() -> scene

### perlin
### aabb
